
/***************************************************************************
 *  LaserBoxFilterInterface.h - Fawkes BlackBoard Interface - LaserBoxFilterInterface
 *
 *  Templated created:   Thu Oct 12 10:49:19 2006
 *  Copyright  2018  Nicolas Limpert
 *
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version. A runtime exception applies to
 *  this software (see LICENSE.GPL_WRE file mentioned below for details).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
 */

#ifndef __INTERFACES_LASERBOXFILTERINTERFACE_H_
#define __INTERFACES_LASERBOXFILTERINTERFACE_H_

#include <interface/interface.h>
#include <interface/message.h>
#include <interface/field_iterator.h>

namespace fawkes {

class LaserBoxFilterInterface : public Interface
{
 /// @cond INTERNALS
 INTERFACE_MGMT_FRIENDS(LaserBoxFilterInterface)
 /// @endcond
 public:
  /* constants */

 private:
  /** Internal data storage, do NOT modify! */
  typedef struct __attribute__((packed)) {
    int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
    int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    uint32_t num_boxes; /**< The number of currently applied boxes */
  } LaserBoxFilterInterface_data_t;

  LaserBoxFilterInterface_data_t *data;

 public:
  /* messages */
  class CreateNewBoxFilterMessage : public Message
  {
   private:
    /** Internal data storage, do NOT modify! */
    typedef struct __attribute__((packed)) {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      double p1[2]; /**< x,y coordinates of first vector */
      double p2[2]; /**< x,y coordinates of second vector */
      double p3[2]; /**< x,y coordinates of third vector */
      double p4[2]; /**< x,y coordinates of fourth vector */
    } CreateNewBoxFilterMessage_data_t;

    CreateNewBoxFilterMessage_data_t *data;

   public:
    CreateNewBoxFilterMessage(const double * ini_p1, const double * ini_p2, const double * ini_p3, const double * ini_p4);
    CreateNewBoxFilterMessage();
    ~CreateNewBoxFilterMessage();

    CreateNewBoxFilterMessage(const CreateNewBoxFilterMessage *m);
    /* Methods */
    double * p1() const;
    double p1(unsigned int index) const;
    void set_p1(unsigned int index, const double new_p1);
    void set_p1(const double * new_p1);
    size_t maxlenof_p1() const;
    double * p2() const;
    double p2(unsigned int index) const;
    void set_p2(unsigned int index, const double new_p2);
    void set_p2(const double * new_p2);
    size_t maxlenof_p2() const;
    double * p3() const;
    double p3(unsigned int index) const;
    void set_p3(unsigned int index, const double new_p3);
    void set_p3(const double * new_p3);
    size_t maxlenof_p3() const;
    double * p4() const;
    double p4(unsigned int index) const;
    void set_p4(unsigned int index, const double new_p4);
    void set_p4(const double * new_p4);
    size_t maxlenof_p4() const;
    virtual Message * clone() const;
  };

  virtual bool message_valid(const Message *message) const;
 private:
  LaserBoxFilterInterface();
  ~LaserBoxFilterInterface();

 public:
  /* Methods */
  uint32_t num_boxes() const;
  void set_num_boxes(const uint32_t new_num_boxes);
  size_t maxlenof_num_boxes() const;
  virtual Message * create_message(const char *type) const;

  virtual void copy_values(const Interface *other);
  virtual const char * enum_tostring(const char *enumtype, int val) const;

};

} // end namespace fawkes

#endif
