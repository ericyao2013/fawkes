
/***************************************************************************
 *  HumanSkeletonProjectionInterface.h - Fawkes BlackBoard Interface - HumanSkeletonProjectionInterface
 *
 *  Templated created:   Thu Oct 12 10:49:19 2006
 *  Copyright  2007-2011  Tim Niemueller
 *
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version. A runtime exception applies to
 *  this software (see LICENSE.GPL_WRE file mentioned below for details).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
 */

#ifndef __INTERFACES_HUMANSKELETONPROJECTIONINTERFACE_H_
#define __INTERFACES_HUMANSKELETONPROJECTIONINTERFACE_H_

#include <interface/interface.h>
#include <interface/message.h>
#include <interface/field_iterator.h>

namespace fawkes {

class HumanSkeletonProjectionInterface : public Interface
{
 /// @cond INTERNALS
 INTERFACE_MGMT_FRIENDS(HumanSkeletonProjectionInterface)
 /// @endcond
 public:
  /* constants */

 private:
  /** Internal data storage, do NOT modify! */
  typedef struct __attribute__((packed)) {
    int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
    int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    float horizontal_fov; /**< Opening angle in radians. */
    float vertical_fov; /**< Opening angle in radians. */
    uint32_t res_x; /**< X resolution (number of columns in frame). */
    uint32_t res_y; /**< Y resolution (number of rows in frame). */
    uint16_t max_depth; /**< Maximum depth value. */
    float proj_com[2]; /**< Center of mass. */
    float proj_head[2]; /**< Head position vector. */
    float proj_neck[2]; /**< Neck position vector. */
    float proj_torso[2]; /**< Torso position vector. */
    float proj_waist[2]; /**< Waist position vector. */
    float proj_left_collar[2]; /**< 
      Left position vector. */
    float proj_left_shoulder[2]; /**< 
      Left shoulder position vector. */
    float proj_left_elbow[2]; /**< 
      Left elbow position vector. */
    float proj_left_wrist[2]; /**< 
      Left wrist position vector. */
    float proj_left_hand[2]; /**< 
      Left hand position vector. */
    float proj_left_fingertip[2]; /**< 
      Left fingertip position vector. */
    float proj_right_collar[2]; /**< 
      Right collar position vector. */
    float proj_right_shoulder[2]; /**< 
      Right shoulder position vector. */
    float proj_right_elbow[2]; /**< 
      Right elbow position vector. */
    float proj_right_wrist[2]; /**< 
      Right wrist position vector. */
    float proj_right_hand[2]; /**< 
      Right hand position vector. */
    float proj_right_fingertip[2]; /**< 
      Right fingertip position vector. */
    float proj_left_hip[2]; /**< 
      Left hip position vector. */
    float proj_left_knee[2]; /**< 
      Left knee position vector. */
    float proj_left_ankle[2]; /**< 
      Left ankle position vector. */
    float proj_left_foot[2]; /**< 
      Left foot position vector. */
    float proj_right_hip[2]; /**< 
      Right hip position vector. */
    float proj_right_knee[2]; /**< 
      Right knee position vector. */
    float proj_right_ankle[2]; /**< 
      Right ankle position vector. */
    float proj_right_foot[2]; /**< 
      Right foot position vector. */
  } HumanSkeletonProjectionInterface_data_t;

  HumanSkeletonProjectionInterface_data_t *data;

 public:
  /* messages */
  virtual bool message_valid(const Message *message) const;
 private:
  HumanSkeletonProjectionInterface();
  ~HumanSkeletonProjectionInterface();

 public:
  /* Methods */
  float horizontal_fov() const;
  void set_horizontal_fov(const float new_horizontal_fov);
  size_t maxlenof_horizontal_fov() const;
  float vertical_fov() const;
  void set_vertical_fov(const float new_vertical_fov);
  size_t maxlenof_vertical_fov() const;
  uint32_t res_x() const;
  void set_res_x(const uint32_t new_res_x);
  size_t maxlenof_res_x() const;
  uint32_t res_y() const;
  void set_res_y(const uint32_t new_res_y);
  size_t maxlenof_res_y() const;
  uint16_t max_depth() const;
  void set_max_depth(const uint16_t new_max_depth);
  size_t maxlenof_max_depth() const;
  float * proj_com() const;
  float proj_com(unsigned int index) const;
  void set_proj_com(unsigned int index, const float new_proj_com);
  void set_proj_com(const float * new_proj_com);
  size_t maxlenof_proj_com() const;
  float * proj_head() const;
  float proj_head(unsigned int index) const;
  void set_proj_head(unsigned int index, const float new_proj_head);
  void set_proj_head(const float * new_proj_head);
  size_t maxlenof_proj_head() const;
  float * proj_neck() const;
  float proj_neck(unsigned int index) const;
  void set_proj_neck(unsigned int index, const float new_proj_neck);
  void set_proj_neck(const float * new_proj_neck);
  size_t maxlenof_proj_neck() const;
  float * proj_torso() const;
  float proj_torso(unsigned int index) const;
  void set_proj_torso(unsigned int index, const float new_proj_torso);
  void set_proj_torso(const float * new_proj_torso);
  size_t maxlenof_proj_torso() const;
  float * proj_waist() const;
  float proj_waist(unsigned int index) const;
  void set_proj_waist(unsigned int index, const float new_proj_waist);
  void set_proj_waist(const float * new_proj_waist);
  size_t maxlenof_proj_waist() const;
  float * proj_left_collar() const;
  float proj_left_collar(unsigned int index) const;
  void set_proj_left_collar(unsigned int index, const float new_proj_left_collar);
  void set_proj_left_collar(const float * new_proj_left_collar);
  size_t maxlenof_proj_left_collar() const;
  float * proj_left_shoulder() const;
  float proj_left_shoulder(unsigned int index) const;
  void set_proj_left_shoulder(unsigned int index, const float new_proj_left_shoulder);
  void set_proj_left_shoulder(const float * new_proj_left_shoulder);
  size_t maxlenof_proj_left_shoulder() const;
  float * proj_left_elbow() const;
  float proj_left_elbow(unsigned int index) const;
  void set_proj_left_elbow(unsigned int index, const float new_proj_left_elbow);
  void set_proj_left_elbow(const float * new_proj_left_elbow);
  size_t maxlenof_proj_left_elbow() const;
  float * proj_left_wrist() const;
  float proj_left_wrist(unsigned int index) const;
  void set_proj_left_wrist(unsigned int index, const float new_proj_left_wrist);
  void set_proj_left_wrist(const float * new_proj_left_wrist);
  size_t maxlenof_proj_left_wrist() const;
  float * proj_left_hand() const;
  float proj_left_hand(unsigned int index) const;
  void set_proj_left_hand(unsigned int index, const float new_proj_left_hand);
  void set_proj_left_hand(const float * new_proj_left_hand);
  size_t maxlenof_proj_left_hand() const;
  float * proj_left_fingertip() const;
  float proj_left_fingertip(unsigned int index) const;
  void set_proj_left_fingertip(unsigned int index, const float new_proj_left_fingertip);
  void set_proj_left_fingertip(const float * new_proj_left_fingertip);
  size_t maxlenof_proj_left_fingertip() const;
  float * proj_right_collar() const;
  float proj_right_collar(unsigned int index) const;
  void set_proj_right_collar(unsigned int index, const float new_proj_right_collar);
  void set_proj_right_collar(const float * new_proj_right_collar);
  size_t maxlenof_proj_right_collar() const;
  float * proj_right_shoulder() const;
  float proj_right_shoulder(unsigned int index) const;
  void set_proj_right_shoulder(unsigned int index, const float new_proj_right_shoulder);
  void set_proj_right_shoulder(const float * new_proj_right_shoulder);
  size_t maxlenof_proj_right_shoulder() const;
  float * proj_right_elbow() const;
  float proj_right_elbow(unsigned int index) const;
  void set_proj_right_elbow(unsigned int index, const float new_proj_right_elbow);
  void set_proj_right_elbow(const float * new_proj_right_elbow);
  size_t maxlenof_proj_right_elbow() const;
  float * proj_right_wrist() const;
  float proj_right_wrist(unsigned int index) const;
  void set_proj_right_wrist(unsigned int index, const float new_proj_right_wrist);
  void set_proj_right_wrist(const float * new_proj_right_wrist);
  size_t maxlenof_proj_right_wrist() const;
  float * proj_right_hand() const;
  float proj_right_hand(unsigned int index) const;
  void set_proj_right_hand(unsigned int index, const float new_proj_right_hand);
  void set_proj_right_hand(const float * new_proj_right_hand);
  size_t maxlenof_proj_right_hand() const;
  float * proj_right_fingertip() const;
  float proj_right_fingertip(unsigned int index) const;
  void set_proj_right_fingertip(unsigned int index, const float new_proj_right_fingertip);
  void set_proj_right_fingertip(const float * new_proj_right_fingertip);
  size_t maxlenof_proj_right_fingertip() const;
  float * proj_left_hip() const;
  float proj_left_hip(unsigned int index) const;
  void set_proj_left_hip(unsigned int index, const float new_proj_left_hip);
  void set_proj_left_hip(const float * new_proj_left_hip);
  size_t maxlenof_proj_left_hip() const;
  float * proj_left_knee() const;
  float proj_left_knee(unsigned int index) const;
  void set_proj_left_knee(unsigned int index, const float new_proj_left_knee);
  void set_proj_left_knee(const float * new_proj_left_knee);
  size_t maxlenof_proj_left_knee() const;
  float * proj_left_ankle() const;
  float proj_left_ankle(unsigned int index) const;
  void set_proj_left_ankle(unsigned int index, const float new_proj_left_ankle);
  void set_proj_left_ankle(const float * new_proj_left_ankle);
  size_t maxlenof_proj_left_ankle() const;
  float * proj_left_foot() const;
  float proj_left_foot(unsigned int index) const;
  void set_proj_left_foot(unsigned int index, const float new_proj_left_foot);
  void set_proj_left_foot(const float * new_proj_left_foot);
  size_t maxlenof_proj_left_foot() const;
  float * proj_right_hip() const;
  float proj_right_hip(unsigned int index) const;
  void set_proj_right_hip(unsigned int index, const float new_proj_right_hip);
  void set_proj_right_hip(const float * new_proj_right_hip);
  size_t maxlenof_proj_right_hip() const;
  float * proj_right_knee() const;
  float proj_right_knee(unsigned int index) const;
  void set_proj_right_knee(unsigned int index, const float new_proj_right_knee);
  void set_proj_right_knee(const float * new_proj_right_knee);
  size_t maxlenof_proj_right_knee() const;
  float * proj_right_ankle() const;
  float proj_right_ankle(unsigned int index) const;
  void set_proj_right_ankle(unsigned int index, const float new_proj_right_ankle);
  void set_proj_right_ankle(const float * new_proj_right_ankle);
  size_t maxlenof_proj_right_ankle() const;
  float * proj_right_foot() const;
  float proj_right_foot(unsigned int index) const;
  void set_proj_right_foot(unsigned int index, const float new_proj_right_foot);
  void set_proj_right_foot(const float * new_proj_right_foot);
  size_t maxlenof_proj_right_foot() const;
  virtual Message * create_message(const char *type) const;

  virtual void copy_values(const Interface *other);
  virtual const char * enum_tostring(const char *enumtype, int val) const;

};

} // end namespace fawkes

#endif
