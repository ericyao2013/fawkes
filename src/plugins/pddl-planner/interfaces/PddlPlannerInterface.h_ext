
/***************************************************************************
 *  PddlPlannerInterface.h - Fawkes BlackBoard Interface - PddlPlannerInterface
 *
 *  Templated created:   Thu Oct 12 10:49:19 2006
 *  Copyright  2016  Frederik Zwilling
 *
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version. A runtime exception applies to
 *  this software (see LICENSE.GPL_WRE file mentioned below for details).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
 */

#ifndef __INTERFACES_PDDLPLANNERINTERFACE_H_
#define __INTERFACES_PDDLPLANNERINTERFACE_H_

#include <interface/interface.h>
#include <interface/message.h>
#include <interface/field_iterator.h>

namespace fawkes {

class PddlPlannerInterface : public Interface
{
 /// @cond INTERNALS
 INTERFACE_MGMT_FRIENDS(PddlPlannerInterface)
 /// @endcond
 public:
  /* constants */

 private:
  /** Internal data storage, do NOT modify! */
  typedef struct __attribute__((packed)) {
    int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
    int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    uint32_t msg_id; /**< 
      The ID of the message that was processed last
     */
    bool final; /**< 
      Is the planning finished?
     */
    bool success; /**< 
      True if the planner found a plan
     */
    char active_planner[30]; /**< 
      Currently selected planner
     */
  } PddlPlannerInterface_data_t;

  PddlPlannerInterface_data_t *data;

 public:
  /* messages */
  class PlanMessage : public Message
  {
   private:
    /** Internal data storage, do NOT modify! */
    typedef struct __attribute__((packed)) {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    } PlanMessage_data_t;

    PlanMessage_data_t *data;

   public:
    PlanMessage();
    ~PlanMessage();

    PlanMessage(const PlanMessage *m);
    /* Methods */
    virtual Message * clone() const;
  };

  virtual bool message_valid(const Message *message) const;
 private:
  PddlPlannerInterface();
  ~PddlPlannerInterface();

 public:
  /* Methods */
  uint32_t msg_id() const;
  void set_msg_id(const uint32_t new_msg_id);
  size_t maxlenof_msg_id() const;
  bool is_final() const;
  void set_final(const bool new_final);
  size_t maxlenof_final() const;
  bool is_success() const;
  void set_success(const bool new_success);
  size_t maxlenof_success() const;
  char * active_planner() const;
  void set_active_planner(const char * new_active_planner);
  size_t maxlenof_active_planner() const;
  virtual Message * create_message(const char *type) const;

  virtual void copy_values(const Interface *other);
  virtual const char * enum_tostring(const char *enumtype, int val) const;

};

} // end namespace fawkes

#endif
