
/***************************************************************************
 *  PclDatabaseRetrieveInterface.h - Fawkes BlackBoard Interface - PclDatabaseRetrieveInterface
 *
 *  Templated created:   Thu Oct 12 10:49:19 2006
 *  Copyright  2012-2013  Tim Niemueller
 *
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version. A runtime exception applies to
 *  this software (see LICENSE.GPL_WRE file mentioned below for details).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
 */

#ifndef __INTERFACES_PCLDATABASERETRIEVEINTERFACE_H_
#define __INTERFACES_PCLDATABASERETRIEVEINTERFACE_H_

#include <interface/interface.h>
#include <interface/message.h>
#include <interface/field_iterator.h>

namespace fawkes {

class PclDatabaseRetrieveInterface : public Interface
{
 /// @cond INTERNALS
 INTERFACE_MGMT_FRIENDS(PclDatabaseRetrieveInterface)
 /// @endcond
 public:
  /* constants */

 private:
  /** Internal data storage, do NOT modify! */
  typedef struct __attribute__((packed)) {
    int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
    int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    uint32_t msgid; /**< 
      The ID of the message that is currently being processed, or 0 if
      no message is being processed.
     */
    bool final; /**< 
      True, if the last goto command has been finished, false if it is
      still running.
     */
    char error[256]; /**< 
      Error description if reconstruction fails.
     */
  } PclDatabaseRetrieveInterface_data_t;

  PclDatabaseRetrieveInterface_data_t *data;

 public:
  /* messages */
  class RetrieveMessage : public Message
  {
   private:
    /** Internal data storage, do NOT modify! */
    typedef struct __attribute__((packed)) {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      int64_t timestamp; /**< 
      Timestamp for which to retrieve the most recent point clouds.
     */
      char database[64]; /**< 
      Database name from which to read the point clouds. If empty will
      use plugin-configured default.
     */
      char collection[128]; /**< 
      Collection name from which to read the point clouds. May NOT
      include the database name.
     */
      char target_frame[64]; /**< 
      Coordinate frame to which to transform the output point cloud.
      The transformation will be done through a fixed frame specified
      in the plugin config. If empty, no transformation is
      performed. If set to "SENSOR" will convert to the sensor frame
      specified in the plugin config.
     */
      bool original_timestamp; /**< 
      Set to true to set the original timestamp on the point cloud,
      false (default) to publish with current time.
     */
    } RetrieveMessage_data_t;

    RetrieveMessage_data_t *data;

   public:
    RetrieveMessage(const int64_t ini_timestamp, const char * ini_database, const char * ini_collection, const char * ini_target_frame, const bool ini_original_timestamp);
    RetrieveMessage();
    ~RetrieveMessage();

    RetrieveMessage(const RetrieveMessage *m);
    /* Methods */
    int64_t timestamp() const;
    void set_timestamp(const int64_t new_timestamp);
    size_t maxlenof_timestamp() const;
    char * database() const;
    void set_database(const char * new_database);
    size_t maxlenof_database() const;
    char * collection() const;
    void set_collection(const char * new_collection);
    size_t maxlenof_collection() const;
    char * target_frame() const;
    void set_target_frame(const char * new_target_frame);
    size_t maxlenof_target_frame() const;
    bool is_original_timestamp() const;
    void set_original_timestamp(const bool new_original_timestamp);
    size_t maxlenof_original_timestamp() const;
    virtual Message * clone() const;
  };

  virtual bool message_valid(const Message *message) const;
 private:
  PclDatabaseRetrieveInterface();
  ~PclDatabaseRetrieveInterface();

 public:
  /* Methods */
  uint32_t msgid() const;
  void set_msgid(const uint32_t new_msgid);
  size_t maxlenof_msgid() const;
  bool is_final() const;
  void set_final(const bool new_final);
  size_t maxlenof_final() const;
  char * error() const;
  void set_error(const char * new_error);
  size_t maxlenof_error() const;
  virtual Message * create_message(const char *type) const;

  virtual void copy_values(const Interface *other);
  virtual const char * enum_tostring(const char *enumtype, int val) const;

};

} // end namespace fawkes

#endif
