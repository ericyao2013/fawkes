
/***************************************************************************
 *  NaoJointStiffnessInterface.h - Fawkes BlackBoard Interface - NaoJointStiffnessInterface
 *
 *  Templated created:   Thu Oct 12 10:49:19 2006
 *  Copyright  2008-2011  Tim Niemueller
 *
 ****************************************************************************/

/*  This program is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 2 of the License, or
 *  (at your option) any later version. A runtime exception applies to
 *  this software (see LICENSE.GPL_WRE file mentioned below for details).
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Library General Public License for more details.
 *
 *  Read the full text in the LICENSE.GPL_WRE file in the doc directory.
 */

#ifndef __INTERFACES_NAOJOINTSTIFFNESSINTERFACE_H_
#define __INTERFACES_NAOJOINTSTIFFNESSINTERFACE_H_

#include <interface/interface.h>
#include <interface/message.h>
#include <interface/field_iterator.h>

namespace fawkes {

class NaoJointStiffnessInterface : public Interface
{
 /// @cond INTERNALS
 INTERFACE_MGMT_FRIENDS(NaoJointStiffnessInterface)
 /// @endcond
 public:
  /* constants */

 private:
  /** Internal data storage, do NOT modify! */
  typedef struct __attribute__((packed)) {
    int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
    int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
    float head_yaw; /**< Head yaw */
    float head_pitch; /**< Head pitch */
    float l_shoulder_pitch; /**< Left shoulder pitch */
    float l_shoulder_roll; /**< Left shoulder roll */
    float l_elbow_yaw; /**< Left elbow yaw */
    float l_elbow_roll; /**< Left elbow roll */
    float l_wrist_yaw; /**< Left wrist yaw */
    float l_hand; /**< Left hand */
    float l_hip_yaw_pitch; /**< Left hip yaw pitch */
    float l_hip_roll; /**< Left hip roll */
    float l_hip_pitch; /**< Left hip pitch */
    float l_knee_pitch; /**< Left knee pitch */
    float l_ankle_pitch; /**< Left ankle pitch */
    float l_ankle_roll; /**< Left ankle roll */
    float r_shoulder_pitch; /**< Right shoulder pitch */
    float r_shoulder_roll; /**< Right shoulder roll */
    float r_elbow_yaw; /**< Right elbow yaw */
    float r_elbow_roll; /**< Right elbow roll */
    float r_wrist_yaw; /**< Right wrist yaw */
    float r_hand; /**< Right hand */
    float r_hip_yaw_pitch; /**< Right hip yaw pitch */
    float r_hip_roll; /**< Right hip roll */
    float r_hip_pitch; /**< Right hip pitch */
    float r_knee_pitch; /**< Right knee pitch */
    float r_ankle_pitch; /**< Right ankle pitch */
    float r_ankle_roll; /**< Right ankle roll */
    float minimum; /**< 
      Minimum stiffness of all joints. On the RoboCup version of the Nao this
      ignores the hand and wrist values.
     */
  } NaoJointStiffnessInterface_data_t;

  NaoJointStiffnessInterface_data_t *data;

 public:
  /* messages */
  class SetStiffnessMessage : public Message
  {
   private:
    /** Internal data storage, do NOT modify! */
    typedef struct __attribute__((packed)) {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      uint32_t servo; /**< 
      A concatenated list of SERVO_* constants from the
      NaoJointPositionInterface to define the servos that should
      execute the movement. The list shall consist of binary or'ed
      SERVO_* constants.
     */
      float value; /**< Servo value to set for servos. */
      float time_sec; /**< Time when to reach the stiffness. */
    } SetStiffnessMessage_data_t;

    SetStiffnessMessage_data_t *data;

   public:
    SetStiffnessMessage(const uint32_t ini_servo, const float ini_value, const float ini_time_sec);
    SetStiffnessMessage();
    ~SetStiffnessMessage();

    SetStiffnessMessage(const SetStiffnessMessage *m);
    /* Methods */
    uint32_t servo() const;
    void set_servo(const uint32_t new_servo);
    size_t maxlenof_servo() const;
    float value() const;
    void set_value(const float new_value);
    size_t maxlenof_value() const;
    float time_sec() const;
    void set_time_sec(const float new_time_sec);
    size_t maxlenof_time_sec() const;
    virtual Message * clone() const;
  };

  class SetBodyStiffnessMessage : public Message
  {
   private:
    /** Internal data storage, do NOT modify! */
    typedef struct __attribute__((packed)) {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      float value; /**< Servo value to set for servos. */
      float time_sec; /**< Time when to reach the stiffness. */
    } SetBodyStiffnessMessage_data_t;

    SetBodyStiffnessMessage_data_t *data;

   public:
    SetBodyStiffnessMessage(const float ini_value, const float ini_time_sec);
    SetBodyStiffnessMessage();
    ~SetBodyStiffnessMessage();

    SetBodyStiffnessMessage(const SetBodyStiffnessMessage *m);
    /* Methods */
    float value() const;
    void set_value(const float new_value);
    size_t maxlenof_value() const;
    float time_sec() const;
    void set_time_sec(const float new_time_sec);
    size_t maxlenof_time_sec() const;
    virtual Message * clone() const;
  };

  class SetStiffnessesMessage : public Message
  {
   private:
    /** Internal data storage, do NOT modify! */
    typedef struct __attribute__((packed)) {
      int64_t timestamp_sec;  /**< Interface Unix timestamp, seconds */
      int64_t timestamp_usec; /**< Interface Unix timestamp, micro-seconds */
      float time_sec; /**< Time when to reach the stiffness. */
      float head_yaw; /**< Head yaw */
      float head_pitch; /**< Head pitch */
      float l_shoulder_pitch; /**< Left shoulder pitch */
      float l_shoulder_roll; /**< Left shoulder roll */
      float l_elbow_yaw; /**< Left elbow yaw */
      float l_elbow_roll; /**< Left elbow roll */
      float l_wrist_yaw; /**< Left wrist yaw */
      float l_hand; /**< Left hand */
      float l_hip_yaw_pitch; /**< Left hip yaw pitch */
      float l_hip_roll; /**< Left hip roll */
      float l_hip_pitch; /**< Left hip pitch */
      float l_knee_pitch; /**< Left knee pitch */
      float l_ankle_pitch; /**< Left ankle pitch */
      float l_ankle_roll; /**< Left ankle roll */
      float r_shoulder_pitch; /**< Right shoulder pitch */
      float r_shoulder_roll; /**< Right shoulder roll */
      float r_elbow_yaw; /**< Right elbow yaw */
      float r_wrist_yaw; /**< Right wrist yaw */
      float r_hand; /**< Right hand */
      float r_hip_yaw_pitch; /**< Right hip yaw pitch */
      float r_hip_roll; /**< Right hip roll */
      float r_hip_pitch; /**< Right hip pitch */
      float r_knee_pitch; /**< Right knee pitch */
      float r_ankle_pitch; /**< Right ankle pitch */
      float r_ankle_roll; /**< Right ankle roll */
      float r_elbow_roll; /**< Right elbow roll */
    } SetStiffnessesMessage_data_t;

    SetStiffnessesMessage_data_t *data;

   public:
    SetStiffnessesMessage(const float ini_time_sec, const float ini_head_yaw, const float ini_head_pitch, const float ini_l_shoulder_pitch, const float ini_l_shoulder_roll, const float ini_l_elbow_yaw, const float ini_l_elbow_roll, const float ini_l_wrist_yaw, const float ini_l_hand, const float ini_l_hip_yaw_pitch, const float ini_l_hip_roll, const float ini_l_hip_pitch, const float ini_l_knee_pitch, const float ini_l_ankle_pitch, const float ini_l_ankle_roll, const float ini_r_shoulder_pitch, const float ini_r_shoulder_roll, const float ini_r_elbow_yaw, const float ini_r_wrist_yaw, const float ini_r_hand, const float ini_r_hip_yaw_pitch, const float ini_r_hip_roll, const float ini_r_hip_pitch, const float ini_r_knee_pitch, const float ini_r_ankle_pitch, const float ini_r_ankle_roll, const float ini_r_elbow_roll);
    SetStiffnessesMessage();
    ~SetStiffnessesMessage();

    SetStiffnessesMessage(const SetStiffnessesMessage *m);
    /* Methods */
    float time_sec() const;
    void set_time_sec(const float new_time_sec);
    size_t maxlenof_time_sec() const;
    float head_yaw() const;
    void set_head_yaw(const float new_head_yaw);
    size_t maxlenof_head_yaw() const;
    float head_pitch() const;
    void set_head_pitch(const float new_head_pitch);
    size_t maxlenof_head_pitch() const;
    float l_shoulder_pitch() const;
    void set_l_shoulder_pitch(const float new_l_shoulder_pitch);
    size_t maxlenof_l_shoulder_pitch() const;
    float l_shoulder_roll() const;
    void set_l_shoulder_roll(const float new_l_shoulder_roll);
    size_t maxlenof_l_shoulder_roll() const;
    float l_elbow_yaw() const;
    void set_l_elbow_yaw(const float new_l_elbow_yaw);
    size_t maxlenof_l_elbow_yaw() const;
    float l_elbow_roll() const;
    void set_l_elbow_roll(const float new_l_elbow_roll);
    size_t maxlenof_l_elbow_roll() const;
    float l_wrist_yaw() const;
    void set_l_wrist_yaw(const float new_l_wrist_yaw);
    size_t maxlenof_l_wrist_yaw() const;
    float l_hand() const;
    void set_l_hand(const float new_l_hand);
    size_t maxlenof_l_hand() const;
    float l_hip_yaw_pitch() const;
    void set_l_hip_yaw_pitch(const float new_l_hip_yaw_pitch);
    size_t maxlenof_l_hip_yaw_pitch() const;
    float l_hip_roll() const;
    void set_l_hip_roll(const float new_l_hip_roll);
    size_t maxlenof_l_hip_roll() const;
    float l_hip_pitch() const;
    void set_l_hip_pitch(const float new_l_hip_pitch);
    size_t maxlenof_l_hip_pitch() const;
    float l_knee_pitch() const;
    void set_l_knee_pitch(const float new_l_knee_pitch);
    size_t maxlenof_l_knee_pitch() const;
    float l_ankle_pitch() const;
    void set_l_ankle_pitch(const float new_l_ankle_pitch);
    size_t maxlenof_l_ankle_pitch() const;
    float l_ankle_roll() const;
    void set_l_ankle_roll(const float new_l_ankle_roll);
    size_t maxlenof_l_ankle_roll() const;
    float r_shoulder_pitch() const;
    void set_r_shoulder_pitch(const float new_r_shoulder_pitch);
    size_t maxlenof_r_shoulder_pitch() const;
    float r_shoulder_roll() const;
    void set_r_shoulder_roll(const float new_r_shoulder_roll);
    size_t maxlenof_r_shoulder_roll() const;
    float r_elbow_yaw() const;
    void set_r_elbow_yaw(const float new_r_elbow_yaw);
    size_t maxlenof_r_elbow_yaw() const;
    float r_wrist_yaw() const;
    void set_r_wrist_yaw(const float new_r_wrist_yaw);
    size_t maxlenof_r_wrist_yaw() const;
    float r_hand() const;
    void set_r_hand(const float new_r_hand);
    size_t maxlenof_r_hand() const;
    float r_hip_yaw_pitch() const;
    void set_r_hip_yaw_pitch(const float new_r_hip_yaw_pitch);
    size_t maxlenof_r_hip_yaw_pitch() const;
    float r_hip_roll() const;
    void set_r_hip_roll(const float new_r_hip_roll);
    size_t maxlenof_r_hip_roll() const;
    float r_hip_pitch() const;
    void set_r_hip_pitch(const float new_r_hip_pitch);
    size_t maxlenof_r_hip_pitch() const;
    float r_knee_pitch() const;
    void set_r_knee_pitch(const float new_r_knee_pitch);
    size_t maxlenof_r_knee_pitch() const;
    float r_ankle_pitch() const;
    void set_r_ankle_pitch(const float new_r_ankle_pitch);
    size_t maxlenof_r_ankle_pitch() const;
    float r_ankle_roll() const;
    void set_r_ankle_roll(const float new_r_ankle_roll);
    size_t maxlenof_r_ankle_roll() const;
    float r_elbow_roll() const;
    void set_r_elbow_roll(const float new_r_elbow_roll);
    size_t maxlenof_r_elbow_roll() const;
    virtual Message * clone() const;
  };

  virtual bool message_valid(const Message *message) const;
 private:
  NaoJointStiffnessInterface();
  ~NaoJointStiffnessInterface();

 public:
  /* Methods */
  float head_yaw() const;
  void set_head_yaw(const float new_head_yaw);
  size_t maxlenof_head_yaw() const;
  float head_pitch() const;
  void set_head_pitch(const float new_head_pitch);
  size_t maxlenof_head_pitch() const;
  float l_shoulder_pitch() const;
  void set_l_shoulder_pitch(const float new_l_shoulder_pitch);
  size_t maxlenof_l_shoulder_pitch() const;
  float l_shoulder_roll() const;
  void set_l_shoulder_roll(const float new_l_shoulder_roll);
  size_t maxlenof_l_shoulder_roll() const;
  float l_elbow_yaw() const;
  void set_l_elbow_yaw(const float new_l_elbow_yaw);
  size_t maxlenof_l_elbow_yaw() const;
  float l_elbow_roll() const;
  void set_l_elbow_roll(const float new_l_elbow_roll);
  size_t maxlenof_l_elbow_roll() const;
  float l_wrist_yaw() const;
  void set_l_wrist_yaw(const float new_l_wrist_yaw);
  size_t maxlenof_l_wrist_yaw() const;
  float l_hand() const;
  void set_l_hand(const float new_l_hand);
  size_t maxlenof_l_hand() const;
  float l_hip_yaw_pitch() const;
  void set_l_hip_yaw_pitch(const float new_l_hip_yaw_pitch);
  size_t maxlenof_l_hip_yaw_pitch() const;
  float l_hip_roll() const;
  void set_l_hip_roll(const float new_l_hip_roll);
  size_t maxlenof_l_hip_roll() const;
  float l_hip_pitch() const;
  void set_l_hip_pitch(const float new_l_hip_pitch);
  size_t maxlenof_l_hip_pitch() const;
  float l_knee_pitch() const;
  void set_l_knee_pitch(const float new_l_knee_pitch);
  size_t maxlenof_l_knee_pitch() const;
  float l_ankle_pitch() const;
  void set_l_ankle_pitch(const float new_l_ankle_pitch);
  size_t maxlenof_l_ankle_pitch() const;
  float l_ankle_roll() const;
  void set_l_ankle_roll(const float new_l_ankle_roll);
  size_t maxlenof_l_ankle_roll() const;
  float r_shoulder_pitch() const;
  void set_r_shoulder_pitch(const float new_r_shoulder_pitch);
  size_t maxlenof_r_shoulder_pitch() const;
  float r_shoulder_roll() const;
  void set_r_shoulder_roll(const float new_r_shoulder_roll);
  size_t maxlenof_r_shoulder_roll() const;
  float r_elbow_yaw() const;
  void set_r_elbow_yaw(const float new_r_elbow_yaw);
  size_t maxlenof_r_elbow_yaw() const;
  float r_elbow_roll() const;
  void set_r_elbow_roll(const float new_r_elbow_roll);
  size_t maxlenof_r_elbow_roll() const;
  float r_wrist_yaw() const;
  void set_r_wrist_yaw(const float new_r_wrist_yaw);
  size_t maxlenof_r_wrist_yaw() const;
  float r_hand() const;
  void set_r_hand(const float new_r_hand);
  size_t maxlenof_r_hand() const;
  float r_hip_yaw_pitch() const;
  void set_r_hip_yaw_pitch(const float new_r_hip_yaw_pitch);
  size_t maxlenof_r_hip_yaw_pitch() const;
  float r_hip_roll() const;
  void set_r_hip_roll(const float new_r_hip_roll);
  size_t maxlenof_r_hip_roll() const;
  float r_hip_pitch() const;
  void set_r_hip_pitch(const float new_r_hip_pitch);
  size_t maxlenof_r_hip_pitch() const;
  float r_knee_pitch() const;
  void set_r_knee_pitch(const float new_r_knee_pitch);
  size_t maxlenof_r_knee_pitch() const;
  float r_ankle_pitch() const;
  void set_r_ankle_pitch(const float new_r_ankle_pitch);
  size_t maxlenof_r_ankle_pitch() const;
  float r_ankle_roll() const;
  void set_r_ankle_roll(const float new_r_ankle_roll);
  size_t maxlenof_r_ankle_roll() const;
  float minimum() const;
  void set_minimum(const float new_minimum);
  size_t maxlenof_minimum() const;
  virtual Message * create_message(const char *type) const;

  virtual void copy_values(const Interface *other);
  virtual const char * enum_tostring(const char *enumtype, int val) const;

};

} // end namespace fawkes

#endif
