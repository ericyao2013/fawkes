%YAML 1.2
%TAG ! tag:fawkesrobotics.org,cfg/
---
doc-url: !url http://trac.fawkesrobotics.org/wiki/Plugins/clips-executive
---
clips-executive:
  # If true, will enable watching of facts and rules
  clips-debug: true

  # If CLIPS debugging is enabled, certain rules and facts can be excluded
  # from watching, e.g. if they are showing up at too high frequencies or
  # are not of interest.
  unwatch-facts: ["time"]
  unwatch-rules: ["time-retract", "blackboard-read"]

  # Currently not working in clips-executive!
  #
  # If true, simulate skills (assuming they always succeed) instead of
  # actually executing the skills. The time indicates how long it should
  # take to declare success on skill execution. Note that this cannot
  # simulate side effects, like a called component writing to an interface
  #skill-sim: true
  #skill-sim-time: 2.0

  # debug level is a number of: 0 ~ none, 1 ~ minimal, 2 ~ more, 3 ~ maximum
  debug-level: 3

  # automatically pre-require redefine-warning feature? Enabling
  # this in the plugin instead of in the initial code (init.clp) is
  # beneficial because it already catches errors in said file.
  request-redefine-warning-feature: true

  # Automatically assert the (start) fact after successful initialization,
  # otherwise wait until the an enable message has been received
  # auto-start: true

  # If set to true, will trigger the assertion of a (time (now)) fact in
  # each loop. This can be used to trigger loop events in CLIPS.
  assert-time-each-loop: true

  # If set to true will force the acquisition of the skiller control.
  # This is particularly useful to kick an SkillGUI which is holding
  # the lock just due to an oversight.
  steal-skiller-control: true

  # Directory where to look for CLIPS files
  clips-dirs: ["@BASEDIR@/src/clips-specs"]

  # Agent name. On startup the clips-agent will try to resolve a file named
  # <agent name>.clp. It must be in the CLIPS path directories.
  spec: test
  use_pddl: true
  sync_domain_facts: true

  specs:
    test:
      domain: test-scenario/test-domain.clp
      worldmodel: test-scenario/worldmodel-facts.clp
      goal-reasoner: test-scenario/goal-reasoner.clp
      goal-expander: test-scenario/goal-expander-pddl.clp
      action-selection: test-scenario/action-selection.clp
      #macro-expansion: test-scenario/action-selection.clp
      action-execution: ["skills-actions.clp", "test-scenario/print-action.clp"]
      execution-monitoring: test-scenario/execution-monitoring.clp
      state-estimation: test-scenario/state-estimation.clp

      # Map plan actions to skill strings.
      action-mapping:
        say: say{text=?(text)s, wait=true}
        say-hello: say{text="Hello ?(name)y", wait=true}
        say-hello-again: say{text="Hello again ?(name)y", wait=true}
        say-goodbye: say{text="Good bye", wait=true}
        say-cleanup: say{text="Cleaning up", wait=true}

      # Map domain predicate names to world model fact IDs
      #wm-remap:
        #facts:
          # Map the prefix, i.e., replace the path by /domain/fact and
          # keep the last element of the path.
          # Example: /wm/foo -> domain predicate foo
          # Arguments must be compatible (same names and accepted values).
          # State as a list of world model fact IDs
          #id-prefix:
          #  - /wm/foo
          #  - /wm/bar
          # Full mapping from domain predicate name to world model fact
          # ID path (without arguments).
          # Example: said -> /wm/spoken
          # Arguments must be compatible (same names and accepted values).
          # State as map from predicate names to world model fact ID
          # path.
          #name-id:
          #  said: /wm/spoken
        #objects:
          # Map the prefix, i.e., replace the path by /domain/fact and
          # keep the last element of the path.
          # Example: /wm/foo -> domain predicate foo
          #id-prefix:
          #  - /wm/sometype
          #  - /wm/anothertype
          # Full mapping from domain predicate name to world model fact
          # ID path (without arguments).
          # Example: objecttype -> /wm/differentobjects
          # path.
          #name-id:
          #  objecttype: /wm/differentobjects

      # Interface _types_ mentioned in the following list will be pre-loaded,
      # i.e., the fact templates will be created in stage2, before user-specified
      # code is loaded. That avoid the necessity of splitting interface opening
      # and processing in user code.
      #blackboard-preload: ["Position3DInterface"]

      # Values in the parameters subtree will be added to the "/config" tree
      # in the world model facts. Everything up until and including /parameters/
      # in the configuration path is removed.
      # Example: /clips-executive/specs/test/parameters/home-pos -> /config/home-pos
      parameters:
        example: value
